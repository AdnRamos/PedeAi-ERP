import 'package:flutter/material.dart';
import 'package:flutter_test/flutter_test.dart';
import 'package:integration_test/integration_test.dart';
import 'package:pedeai/main.dart' as app;

void main() {
  IntegrationTestWidgetsFlutterBinding.ensureInitialized();

  group('Teste de Integra√ß√£o - Caixa', () {
    testWidgets('Teste Completo: Abertura de Caixa com Verifica√ß√£o', (
      WidgetTester tester,
    ) async {
      print('üöÄ INICIANDO TESTE DE ABERTURA DE CAIXA...');
      print('=' * 80);

      try {
        // 1. Inicializar aplica√ß√£o
        print('üé¨ ETAPA 1: Inicializando aplica√ß√£o...');
        await app.main();
        await tester.pumpAndSettle(const Duration(seconds: 2));
        print('‚úÖ App inicializado com sucesso');

        // 2. Fazer login
        print('\nüîê ETAPA 2: Realizando login...');

        // Aguardar tela carregar
        await tester.pumpAndSettle(const Duration(seconds: 2));

        // Preencher campos de login
        final textFields = find.byType(TextFormField);
        if (textFields.evaluate().length >= 2) {
          await tester.enterText(textFields.first, 'adm2@adm.com');
          await tester.enterText(textFields.at(1), '123456');
          await tester.pumpAndSettle(const Duration(seconds: 1));

          // Clicar no bot√£o de login
          final loginButton = find.text('Entrar');
          if (loginButton.evaluate().isNotEmpty) {
            await tester.tap(loginButton.first);
            await tester.pumpAndSettle(const Duration(seconds: 3));
            print('‚úÖ Login realizado');
          }
        }

        // 3. Navegar para Caixa
        print('\nüß≠ ETAPA 3: Navegando para Caixa...');

        // Abrir menu drawer
        final drawerButton = find.byIcon(Icons.menu);
        if (drawerButton.evaluate().isNotEmpty) {
          await tester.tap(drawerButton);
          await tester.pumpAndSettle(const Duration(seconds: 2));
          print('‚úÖ Menu aberto');

          // Clicar em Caixa
          final caixaOption = find.text('Caixa');
          if (caixaOption.evaluate().isNotEmpty) {
            await tester.tap(caixaOption.first);
            await tester.pumpAndSettle(const Duration(seconds: 2));
            print('‚úÖ Navegado para Caixa');

            // Clicar em Abertura de caixa
            final aberturaOption = find.text('Abertura de caixa');
            if (aberturaOption.evaluate().isNotEmpty) {
              await tester.tap(aberturaOption.first);
              await tester.pumpAndSettle(const Duration(seconds: 3));
              print('‚úÖ Navegado para Abertura de caixa');
            }
          }
        }

        // 4. Verificar se caixa j√° est√° aberto
        print('\nüîç ETAPA 4: Verificando status do caixa...');

        // Aguardar um momento para a tela carregar completamente
        await tester.pumpAndSettle(const Duration(seconds: 2));

        // Verificar mensagens que indicam que o caixa j√° est√° aberto
        final mensagensCaixaAberto = [
          'O caixa j√° est√° aberto',
          'Caixa j√° aberto',
          'j√° est√° aberto',
          'caixa aberto',
        ];

        bool caixaJaAberto = false;
        String mensagemEncontrada = '';

        for (String mensagem in mensagensCaixaAberto) {
          final found = find.textContaining(mensagem);
          if (found.evaluate().isNotEmpty) {
            mensagemEncontrada = mensagem;
            caixaJaAberto = true;
            break;
          }
        }

        if (caixaJaAberto) {
          print('‚ö†Ô∏è  CAIXA J√Å EST√Å ABERTO!');
          print('‚ÑπÔ∏è  Mensagem encontrada: $mensagemEncontrada');
          print('‚úÖ O sistema corretamente impediu abertura duplicada');
          print(
            'üéâ TESTE CONCLU√çDO COM SUCESSO - Valida√ß√£o de caixa j√° aberto funcionou!',
          );
        } else {
          print('‚úÖ Caixa n√£o est√° aberto, prosseguindo com abertura...');

          // 5. Tentar inserir valor e confirmar
          print('\nüí∞ ETAPA 5: Inserindo valor e confirmando...');

          // Procurar por diferentes tipos de campos de texto
          final allTextFields = find.byType(TextFormField);
          final plainTextFields = find.byType(TextField);
          final editableTexts = find.byType(EditableText);

          bool valorInserido = false;
          String valorTeste = '100.00';

          // Tentar TextFormField
          if (allTextFields.evaluate().isNotEmpty) {
            print('üìù Inserindo valor em TextFormField...');
            await tester.enterText(allTextFields.first, valorTeste);
            valorInserido = true;
          }
          // Tentar TextField simples
          else if (plainTextFields.evaluate().isNotEmpty) {
            print('üìù Inserindo valor em TextField...');
            await tester.enterText(plainTextFields.first, valorTeste);
            valorInserido = true;
          }
          // Tentar EditableText
          else if (editableTexts.evaluate().isNotEmpty) {
            print('üìù Inserindo valor em EditableText...');
            await tester.enterText(editableTexts.first, valorTeste);
            valorInserido = true;
          }
          // Tentar clicar no valor 0,00 primeiro
          else {
            final valorZero = find.text('0,00');
            if (valorZero.evaluate().isNotEmpty) {
              print('üéØ Clicando no campo 0,00...');
              await tester.tap(valorZero.first);
              await tester.pumpAndSettle(const Duration(seconds: 1));

              // Tentar novamente ap√≥s clicar
              final fieldsAposClic = find.byType(TextFormField);
              if (fieldsAposClic.evaluate().isNotEmpty) {
                print('üìù Agora inserindo valor ap√≥s clique...');
                await tester.enterText(fieldsAposClic.first, valorTeste);
                valorInserido = true;
              }
            }
          }

          if (valorInserido) {
            print('‚úÖ Valor $valorTeste inserido');
            await tester.pumpAndSettle(const Duration(seconds: 1));
          } else {
            print('‚ö†Ô∏è  N√£o foi poss√≠vel inserir valor, mas continuando...');
          }

          // Confirmar abertura
          final confirmarButton = find.text('Confirmar abertura');
          if (confirmarButton.evaluate().isNotEmpty) {
            print('üéØ Clicando em Confirmar abertura...');
            await tester.tap(confirmarButton.first);
            await tester.pumpAndSettle(const Duration(seconds: 3));
            print('‚úÖ Abertura confirmada');

            // Verificar poss√≠veis mensagens de sucesso
            await tester.pumpAndSettle(const Duration(seconds: 2));
            final successKeywords = ['sucesso', 'aberto', 'confirmad'];
            for (String keyword in successKeywords) {
              final successMessage = find.textContaining(keyword);
              if (successMessage.evaluate().isNotEmpty) {
                print('üéâ Mensagem de sucesso encontrada contendo: $keyword');
                break;
              }
            }
          } else {
            print('‚ùå Bot√£o Confirmar abertura n√£o encontrado');
          }
        }

        print('\nüéâ TESTE CONCLU√çDO!');
        print('=' * 80);
      } catch (e) {
        print('‚ùå ERRO NO TESTE: $e');
        rethrow;
      }
    });

    testWidgets('Teste: Verifica√ß√£o de Caixa J√° Aberto', (
      WidgetTester tester,
    ) async {
      print('üöÄ TESTE ESPEC√çFICO: Verifica√ß√£o de caixa j√° aberto...');

      try {
        // Inicializar e fazer login
        await app.main();
        await tester.pumpAndSettle(const Duration(seconds: 2));

        final textFields = find.byType(TextFormField);
        if (textFields.evaluate().length >= 2) {
          await tester.enterText(textFields.first, 'adm2@adm.com');
          await tester.enterText(textFields.at(1), '123456');

          final loginButton = find.text('Entrar');
          if (loginButton.evaluate().isNotEmpty) {
            await tester.tap(loginButton.first);
            await tester.pumpAndSettle(const Duration(seconds: 3));
          }
        }

        // Navegar para Caixa > Abertura de caixa
        final drawerButton = find.byIcon(Icons.menu);
        if (drawerButton.evaluate().isNotEmpty) {
          await tester.tap(drawerButton);
          await tester.pumpAndSettle(const Duration(seconds: 2));

          final caixaOption = find.text('Caixa');
          if (caixaOption.evaluate().isNotEmpty) {
            await tester.tap(caixaOption.first);
            await tester.pumpAndSettle(const Duration(seconds: 2));

            final aberturaOption = find.text('Abertura de caixa');
            if (aberturaOption.evaluate().isNotEmpty) {
              await tester.tap(aberturaOption.first);
              await tester.pumpAndSettle(const Duration(seconds: 3));
            }
          }
        }

        // Verificar especificamente se h√° mensagem de caixa j√° aberto
        await tester.pumpAndSettle(const Duration(seconds: 2));

        final caixaJaAbertoMsg = find.textContaining('j√° est√° aberto');
        if (caixaJaAbertoMsg.evaluate().isNotEmpty) {
          print('‚úÖ SUCESSO: Encontrada mensagem de caixa j√° aberto');
          print('üîí Sistema corretamente bloqueou abertura duplicada');
        } else {
          print('‚ÑπÔ∏è  Caixa n√£o est√° aberto ou mensagem n√£o encontrada');
        }

        print('üéâ TESTE DE VERIFICA√á√ÉO CONCLU√çDO!');
      } catch (e) {
        print('‚ùå ERRO: $e');
      }
    });
  });
}
